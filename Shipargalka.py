'====================================Численные типы данных==========='
# int - целое число
# float - вещественное число
# decimal - более точное вещественное число
# bin - бинарное число
# complex - комплексное число
'=========================Stroki, string================'
# Строки - это не изменяемый тип строки, который предназначен для хранения текста (последовательности символов), заклченного в одинарные или двойные кавычки
'=========================Экранизация строк======================='
# '\n' # переносит на новую строку
# string6 = 'Ada course\nThe better courses'
# print (string6)
# '\t' # табуляция 
# print ('hello\tworld')
# '\'' # отображение кавычки 
# "\"" #отображение двойных кавычек
# '\\' # отображение одного слеша
# print ('https:\\www.google.com', '~\\Desktop\\ada')
# '\v' # перенос строки на новую со смещением вправо на длину предыдущей строки 
# print ('hello\vworld\vada\vcourses')
# '\r' # перенос каретки на начало строки

'===============================Методы строк==================='
# Методы - это функция которым относятся к определенному классу (типу данных), к ним обращаемся через точку

'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'
# string = 'heLLO worLd'
# upper_string = string.upper() # все большие буквы
# print (upper_string, string)
# print(string.lower()) # все маленькие буквы
# print(string.swapcase()) # меняет регистры всех букв
# print (string.title()) # каждое новое слово будет с большой буквы
# print (string.capitalize()) # делает первую букву с большой а все остальные маленькие 
# print (string.count ('l')) # считает символы
# print (string.startswith ('he')) # проверка начинается ли строка с заданных символов
# print (string.endswith ('Ld')) # Проверка начинается ли строка с заданных символов (с конца)
# print (string.isupper()) # проверка всех символов на нижний регистр 
# print (string.islower()) # проверка всех символов верхний регистр 
# print (string.isdigit()) # проверка является ли строка числовой
# print (string.isalpha()) # является ли строка буквами
# print (string.isalnum()) # является ли строка числами или все вместе
# print (string.split())  # разделитель
# print ('*'.join (['hello', 'world']))   # склеивает строки
# print(string.replace('L', 'l')) # меняет все символы на указанный

'========================list========'
#изменяемый, индексируемый, упорядочный, итерируемый тип данных, предназначенный для хранения любых данных в опеределенном порядке - []


# append - добавляет элемент в конец списка
# pop - удаляет элемент из списка по индексу и возращает этот удаленный элемент, если не указать индекс то он удалит последний элемент
# extand - расширяет список засчет другого списка
# remove - удаляет элемент из списка по значение
# count - cчитает количество принятого элемента в списке
# index - возращает индекс первого вхождения элемента
# insert - добавляет элемент в список по индексу
# reverse - изменяет список, раставляя его элементы в обратном порядке

'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort' 
# All goes by list.append()

'===========================Tuple================================'
# Tuple (кортеж) - неизменяемый тип данных, упорядочен, индексируемый, итерируемый
'''
Кортеж является неизменяемым типом данных, что означает после создания кортежа его содержимое нельзя изменить
Упорядочен - это означает что порядок элементов в кортеже сохраняется
Индексируемый - что позволяет получить доступ к его элементам по индексу
Итерируемый - это означает, что мы можем перебрать все его элементы в цикле
# '''
# tuple_ = (1,2,3) # Кортеж
# tuple_1 = () # Кортеж
# tuple_2 = (1) #int
# tuple_3 = (1,) #Кортеж
# tuple_4 = 1, # Кортеж
# print(type(tuple_4))
# tuple_5 = tuple('helloworld')
# print(dir(tuple))- #count, index

'=====================dict================='
# dict_ ={'Anton' : 20, 'Maks' :22}
# Словарь- изменяемые, итерируемый, неупорядочный, неиндексируемый тип данных, хранит в парах {ключ: значение} {key: value}

'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values'
# get - метод, который возвращает значение по ключу, если такого ключа нет, то возвращает None или дефолтное значение
# pop - метод, удаляет пару по ключу и возвращает значение 
# popitem - метод, удаляет последнюю пару и возвращает еe
# update - метод, который расширяет словарь парами из другого словаря 
#clear- очищает словарь 
#fromkeys- метод, который создает новый словарь исползуя список ключей 


'==============================Множество(Set)============'
#Множество- это изменяемый, нупорядочный, итерируемый, неиндексируемый, предназначен для хранения уникальных значений (нельзя хранить изменямые типы данных), даже нельзя в tuple ([1, 2, 3,])

# isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update'

'==========================Методы множества=========================='
# set1 = {'a', 'b', 3, 4, 5}
# # add - добавляет элемент в множество
# set1.add(33)
# print(set1)
# print(dir(set))
# # pop - удаляет случайный элемент из множество
# popped = set1.pop()
# print(popped)
# print(set1)

# # remove - удаляет элемент по значение из множества, если не найдет значение выводит ошибку keyerror
# set1.remove('a')
# # set1.remove('c')
# print(set1)

# difference - находит различия между множеством и другой колеекцией
# set1 = {1,2,3}
# set2 = {3,4,5}
# print(set1.difference(set2)) # {1, 2}
# print(set2.difference(set1)) # {4, 5}

# # symmetric_difference - находит только разные значения в множествах
# print(set1.symmetric_difference(set2)) # {1, 2, 4, 5}

# # intersection - выводит одинаковые значения коллекций
# print(set1.intersection(set2)) # {3}
