#  Строки - это не изменяемый тип строки, который предназначен для хранения текста (последовательности символов), заклченного в одинарные или двойные кавычки

# string1 = 'строка с одинарными кавычками'
# string2 = "строка с двойными кавычками "

# string3 = "Don't" # одинарные кавычки внутри двойных являются символом 
# print (string3)
# string4 = 'Peter is "strong" man'
# print (string4)
# string5 = 'Peter isn\'t "strong" man' # обратный слеш подсказывает python что после него идет символ кавычки 
# print (string5)
# # Литералами строк являются как одинарные кавычки так и двойные. 



# '=========================Экранизация строк======================='
# '\n' # переносит на новую строку
# string6 = 'Ada course\nThe better courses'
# print (string6)
# '\t' # табуляция 
# print ('hello\tworld')
# '\'' # отображение кавычки 
# "\"" #отображение двойных кавычек
# '\\' # отображение одного слеша
# print ('https:\\www.google.com', '~\\Desktop\\ada')
# '\v' # перенос строки на новую со смещением вправо на длину предыдущей строки 
# print ('hello\vworld\vada\vcourses')
# '\r' # перенос каретки на начало строки
# print ('Hello world\rHi')

# string7 = ''' 
# Многострочный текст 
# в одинарных кавычках,
# тут можно ставить 'любые' "кавычки"
# '''
# print(string7)

# '======================Форматирование строк========================'
# title = 'Iphone 13'
# price = 900 
# format1 = f'Название: {title}\nЦена:{price}'
# print(format1)
# format2 = 'Название: {}\nЦена:{}'
# print(format2.format ('Хлеб', 15))
# print(format2.format (title, price))

# format3 = 'Название: %s\nЦена:%s'
# print(format3 % (title, price))


'==============================Конкатенация==========================='
# Конкатенация - это опреация сложения двух строк
# string8 = 'hello' + 'world' # конкатенация
# print (string8)
# string9 = ('hello' + 'world')* 2
# print (string9)

'==============================Индексы==================================='
# Индексы - это порядковый номер элемента в последовательности (символ строке), начинается с нуля: 0, 1, 2, 3...
# Индексы указывают в квадратных скобках string[0] -  доступ к первому элементу
 
# '''
# h e l l o w o r l d 
# 0 1 2 3 4 5 6 7 9 10
#                    -3 -2 -1
# '''
# string= 'hello world'
# print (string [-1])

# Срез строк - это определенная часть строки
# string[start, end, step]
# print (string[0:5]) # показывает первые пять символов
# string[start:end: step]
# print (string [0::2])# середина указывает на сколько символом перепрыгивать
# print (string[::-1]) # переворачивает всю строку
# print (string [:]) # вся строка 
# print (string [-2:]) # строка состоящая из символов с индексами -2, -1

'===============================Методы строк==================='
# Методы - это функция которым относятся к определенному классу (типу данных), к ним обращаемся через точку

# Функция type - подскажет какой тип данных у нас хранится
print (type ('123')) # class <str>
# Функция dir - подскажет все методы нашего типа данных
# print (dir (str)) # посмотреть все методы string 

# string = 'heLLO worLd'
# upper_string = string.upper() # все большие буквы
# print (upper_string, string)
# print(string.lower()) # все маленькие буквы
# print(string.swapcase()) # меняет регистры всех букв
# print (string.title()) # каждое новое слово будет с большой буквы
# print (string.capitalize()) # делает первую букву с большой а все остальные маленькие 
# print (string.count ('l')) # считает символы
# print (string.startswith ('he')) # проверка начинается ли строка с заданных символов
# print (string.endswith ('Ld')) # Проверка начинается ли строка с заданных символов (с конца)
# print (string.isupper()) # проверка всех символов на нижний регистр 
# print (string.islower()) # проверка всех символов верхний регистр 
# print (string.isdigit()) # проверка является ли строка числовой
# print (string.isalpha()) # является ли строка буквами
# print (string.isalnum()) # является ли строка числами или все вместе
# print (string.split())  # разделитель
# print ('*'.join (['hello', 'world']))   # склеивает строки
# print(string.replace('L', 'l')) # меняет все символы на указанный

# fio = input('Как вас зовут? и сколько вам лет?: ')
# today = input('Какой сегодня день?')
# print(fio.upper() , today.lower())

# bool_1 = True
# print(str(bool_1), type(str(bool_1)))


# name= input("Введите ваше имя: ")
# age = input('Введите ваш возраст: ')
# movie = input("Введите ваш любимый фильм: ")
# print(f'Привет {name}\nВаш фильм очень интересный {movie}')


# text = """Этот документ описывает соглашение о том, как писать код для языка python, включая стандартную библиотеку, входящую в состав python.
# # PEP 8 создан на основе рекомендаций Гуидо ван Россума с добавлениями от Барри. Если где-то возникал конфликт, мы выбирали стиль Гуидо.
# # И, конечно, этот PEP может быть неполным (фактически, он, наверное, никогда не будет закончен)."""
# simvol = input('Введите символ по которому будет разделена строка: ')
# new_text = text.split(simvol)
# print(new_text)
# print('*'.join(new_text))

# text = """Ключевая идея Гуидо такова: код читается намного больше раз, чем пишется.
# Собственно, рекомендации о стиле написания кода направлены на то, чтобы улучшить читаемость кода и сделать его согласованным
# между большим числом проектов. В идеале, весь код будет написан в едином стиле, и любой сможет легко его прочесть."""
# print(text.replace('е', '5'))

# text = """Пробелы - самый предпочтительный метод отступов.
# Табуляция должна использоваться только для поддержки кода, написанного с отступами с помощью табуляции.
# Python 3 запрещает смешивание табуляции и пробелов в отступах.
# Python 2 пытается преобразовать табуляцию в пробелы"""

# text1 = text.replace('.', '').replace(',', '')
# text2 = text1.split()
# word = len(text2)
# print(f'Слов в нашем тексте: {word}')
# print (text1.isalpha ())

# text = "Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design."
# print (list(text))
# text2 = '|'.join(list(text))
# print(text2)
# print(text.capitalize())

# text = input ('Пишите свое слово:')
# print (text.upper)



# text = "Dj(.=(.(,,,,,ango i,,s a hi,,,,gh-,.,.,.,.level Python( web framewor(.....k"
# print(text.replace('.', '').replace(',', '').replace('(', '').replace('=', ''))


# text = input("Введите что-либо: ")
# if text.isalpha():
#     print(text.lower())
# else:
#     print('Вести только буквы')

# number = input('Введите число: ')
# if number.isdigit():
#     print((int(number) * 2) **3)
# else:
#     print('Введите число')

# slovo = input('Введите ваше слово: ')
# palidrom = slovo[::-1]
# print(palidrom)
# if slovo == palidrom:
#     print('Ваше слово является палидромом')

'''
Напишите программу, которая считывает с клавиатуры две строки – имя и фамилию пользователя и выводит фразу:
«Hello [введенное имя] [введенная фамилия]! You have just delved into Python»
'''
# name = input ('Введите ваше имя:')
# surname = input ('Введите вашу фамилию:')
# print (f'Hello', name, surname, 'You have just delved in Python')
'''
# Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.
# Москва
# Санкт-Петербург
# Екатеринбург

# Cамое короткое: Москва
# Самое длинное: Санкт-Петербург '''

# a = input()
# b = input()
# c = input()
# print(len(a),len(b),len(c))
# if len(a)> len(b) and len(a)> len(c):
#     print(f'Самое длинное:{a}')
#     if len(b)> len(c):
#         print(f'Cамое короткое:{c}')
#     else:
#         print(f'Cамое короткое:{b}')
# elif len(b)> len(a) and len(b)> len(c):
#     print(f'Самое длинное:{b}')
#     if len(a)> len(c):
#         print(f'Cамое короткое:{c}')
#     else:
#         print(f'Cамое короткое:{a}')
# elif len(c)> len(b) and len(c)> len(a):
#     print(f'Самое длинное:{c}')
#     if len(b)> len(a):
#         print(f'Cамое короткое:{a}')
#     else:
#         print(f'Cамое короткое:{b}')


'''
Вводятся 3 строки в случайном порядке. Напишите программу, которая выясняет, можно ли из длин этих строк построить арифметическую прогрессию.
Формат входных данных
На вход программе подаются три строки, каждая на отдельной строке.
Формат выходных данных
Программа должна вывести строку «YES», если из длин введенных слов можно построить арифметическую прогрессию, или «NO» - в противном случае.
abc
a
abcde
YES
'''

# from math import *
# a = len(input())
# b = len(input())
# c = len(input())
# if (2 * b - c - a) * (2 * c - b - a) * (2 * a - b - c):
#     print('YES')
# else:
#     print('NO')


